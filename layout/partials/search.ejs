<%
  const submit_search_id = "submit-search";
  const search_text_id = "search-text";
  const ignore_case_id = "ignore-case";
  const ignore_accents_id = "ignore-accents";
  const search_input_id = "search_input";
  const regex_id = "regex";
  const search_input = {id: "search_input_id", text: "search_input-text", ignore_case: 'search_input-ignore-case', ignore_accents: 'search_input-ignore-accents', regex: 'search_input-regex', button: 'search_input-button'};
  const search_tags_id= 'search-tags';
%>

<datalist id="<%search_tags_id%>">
  <% Object.keys(theme.search_tags).forEach(key => { %>
    <option value="<%=theme.search_tags[key]%>")>
  <% }); %>
</datalist>

<div id="<%search_input.id%>">
  <label for="<%search_input.text%>"> Enter search text:</label>
  <input id="<%search_input.text%>" type="search" name="<%search_input.text%>" size='20' minlength='1' maxlength='255' placeholder='keyword' list="<%search_tags_id%>">
  <input id="<%search_input.ignore_case%>" type="checkbox" checked>
  <label for="<%search_input.ignore_case%>">Ignore case</label>
  <input id="<%search_input.ignore_accents%>" type="checkbox" checked>
  <label for="<%search_input.ignore_accents%>">Ignore accents</label>
  <input id="<%search_input.regex%>" type="checkbox">
  <label for="<%search_input.regex%>">Regular expression</label>
  <button id="<%search_input.button%>" type='button'>Search</button>
</div>
<script type="module">
  import {exec_search, fetchData} from "/js/analyze-data.js";
  function search() {
    const search_result_container_map = {id: "search-result-container", heading: "heading", entries: "entries"};
    const search_result_entry_map = {id: "search-result-entry", url: 'entry-url', title: 'entry-title', date: 'entry-date', content: 'entry-content'};
    const search_input = {id: "search_input_id", text: "search_input-text", ignore_case: 'search_input-ignore-case', ignore_accents: 'search_input-ignore-accents', regex: 'search_input-regex', button: 'search_input-button'};
    exec_search(fetchData(), search_result_container_map, search_result_entry_map, search_input);
    return false;
  }

  const button = document.getElementById("<%search_input.button%>");
  console.assert(button instanceof Element, 'No button!');
  button.addEventListener('click', (event) => {
    search();
    event.preventDefault();
  });
</script>
<%
  const search_result_container_map = {id: "search-result-container", heading: "heading", entries: "entries"}
  const search_result_container_id = search_result_container_map.id 
  const search_result_container_heading = search_result_container_map.heading 
  const search_result_container_entries = search_result_container_map.entries 
  const search_result_name = "search-result"
  const search_entries_name = "search-entries"
  const search_result_entry_map = {id: "search-result-entry", url: 'entry-url', title: 'entry-title', date: 'entry-date', content: 'entry-content'}
  const search_result_entry_id = search_result_entry_map.id;
%>
<template id="<%search_result_container_map.id%>">
  <div id="<%search_result_container_map.id%>">
    <h2 class="<%search_result_container_map.heading%>">
      <slot name="<%search_result_container_map.heading%>">(Search result)</slot>
    </h2>
    <ul class="<%search_result_container_map.entries%>">
      <slot name="<%search_result_container_map.entries%>"></slot>
    </ul>
  </div>
</template>
<template id="<%search_result_entry_map.id%>">
  <li class="<%search_result_entry_map.id%>" slot="<%search_result_container_map.entries%>">
    <a class="<%search_result_entry_map.url%>">
      <span class="<%search_result_entry_map.title%>"></span>
    </a>
    <time class="<%search_result_entry_map.date%>"></time>
    <p class="<%search_result_entry_map.content%>" data-length='200'></p>
    <img class="thumbnail"></img>
  </li>
</template>

<script type="module">
  customElements.define(
  "<%search_result_container_map.id%>",
  class extends HTMLElement {
    constructor() {
      super();
      const template = document.getElementById("<%search_result_container_map.id%>");
      console.assert(template instanceof HTMLElement, `no template!`);
      const templateContent = template.content;
      console.assert(templateContent instanceof DocumentFragment, `no template content`);
      const _shadowRoot = this.attachShadow({mode: 'open'});
      console.assert(_shadowRoot, `attach shadow failed!`);
      const cloned = templateContent.cloneNode(true);
      console.assert(cloned, `clone node failed!`);
      const child = _shadowRoot.appendChild(cloned);
      console.assert(child, `append cloned:${cloned} failed!`)
      console.debug(`shadow root(${_shadowRoot}) appended a cloned child(${cloned}).`);
    }
  }
  );
</script>

<search-result-container  id="<%search_result_container_map.id%>" style="color: blue;">